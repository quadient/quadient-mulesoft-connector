openapi: 3.0.1
info:
  description: "For more details and full context regarding Quadient REST API services,\
    \ consult documentation at: https://www.quadient.com/documentation."
  title: Content Author REST API
  version: 1.0.0
  x-service-code: CA
tags:
- name: Block Drafts
- name: Template Drafts
- name: Content Management
- name: Templates
paths:
  /baseTemplates:
    get:
      description: Lists Base templates.
      operationId: getBaseTemplates
      parameters:
      - description: Name of folder whose content will be listed.
        in: query
        name: folder
        schema:
          type: string
      - description: Number of items to skip before starting to collect the resulting
          set.
        in: query
        name: offset
        schema:
          type: integer
          format: int32
          default: 0
          minimum: 0
      - description: Number of items to return (max. 100).
        in: query
        name: limit
        schema:
          type: integer
          format: int32
          default: 20
          maximum: 100
          minimum: 0
      - description: Determines whether to include metadata in the response.
        in: query
        name: includeMetadata
        schema:
          type: boolean
          default: false
      - content:
          '*/*':
            examples:
              Document category == A && Document category != B:
                description: Document category == A && Document category != B
                summary: Document category == A && Document category != B
                value:
                  operator: and
                  conditions:
                  - negation: false
                    categorizations:
                    - negation: false
                      name: General
                      fieldName: Document category
                      value: A
                      operator: equal
                  - negation: false
                    categorizations:
                    - negation: true
                      name: General
                      fieldName: Document category
                      value: B
                      operator: equal
            schema:
              $ref: "#/components/schemas/Condition"
        description: Conditions can be nested and can contain the same elements as
          the main condition. See the Condition schema.
        in: query
        name: condition
      - description: List Base templates that the specified user can see.
        in: query
        name: holder
        schema:
          type: string
      - description: "List Base templates that have the specified approval states,\
          \ separated by a colon."
        example: Production:Testing
        in: query
        name: approvalStates
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/BaseTemplateList"
          description: List of Base templates.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "400":
          content:
            application/json;charset=UTF-8:
              examples:
                HTTP 400 error code validation error.:
                  description: HTTP 400 error code validation error.
                  summary: HTTP 400 error code when getting Base templates.
                  value:
                    status: 400
                    title: The 'limit' parameter has invalid value.
                    code: "10200001"
                    detail: Value must be > 0 and <= 100.
              schema:
                $ref: "#/components/schemas/ApiBadRequestException"
          description: Validation errors.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "401":
          $ref: "#/components/responses/401"
        "429":
          $ref: "#/components/responses/429"
      security:
      - bearerAuth: []
      tags:
      - BaseTemplates
  /blockDraft/createFromJson:
    post:
      description: Creates a block draft from a JSON file.
      operationId: createBlockDraftFromJson
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreateBlockDraftMultipartRequestBody"
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              examples:
                Block draft creation response:
                  description: Block draft creation response
                  summary: HTTP 201 code when creating a block draft
                  value:
                    draft: {}
                    result:
                      contentMigrationResult:
                        Result: Ok
                      valid: true
              schema:
                $ref: "#/components/schemas/DraftJsonIpsResult"
          description: Block Draft created.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "400":
          content:
            application/json;charset=UTF-8:
              examples:
                Validation error.:
                  description: Validation error.
                  summary: HTTP 400 error code when creating a block draft
                  value:
                    status: 400
                    title: The parameter has invalid value.
                    code: "10200001"
                    detail: File not found on path 'icm://Interactive/StandardPackage/BaseTemplates/INVALID_TEMPLATE.wfd'.
              schema:
                $ref: "#/components/schemas/ApiBadRequestException"
          description: Validation errors.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "401":
          $ref: "#/components/responses/401"
        "429":
          $ref: "#/components/responses/429"
      security:
      - bearerAuth: []
      tags:
      - Block Drafts
  /blockDraft/createWithVFF:
    post:
      description: Creates a block draft with variable formatted flows.
      operationId: createBlockDraftWithVFF
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
              - $ref: "#/components/schemas/CreateBlockDraftWithVFFType"
              - $ref: "#/components/schemas/VariableFormattedFlows"
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              examples:
                Block draft creation response:
                  description: Block draft creation response
                  summary: HTTP 201 code when creating a block draft
                  value:
                    guid: 32c844bb-5bc2-452b-b1be-a04eb626d9a1
                    url: https://company.inspirecloud.net/authoring/?block-id=32c844bb-5bc2-452b-b1be-a04eb626d9a1
              schema:
                $ref: "#/components/schemas/CreateDraftWithVFFResult"
          description: Block Draft created.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "400":
          content:
            application/json;charset=UTF-8:
              examples:
                Validation error.:
                  description: Validation error.
                  summary: HTTP 400 error code when creating a block draft
                  value:
                    status: 400
                    title: The parameter has invalid value.
                    code: "10200001"
                    detail: File not found on path 'icm://Interactive/StandardPackage/BaseTemplates/INVALID_TEMPLATE.wfd'.
              schema:
                $ref: "#/components/schemas/ApiBadRequestException"
          description: Validation errors.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "401":
          $ref: "#/components/responses/401"
        "429":
          $ref: "#/components/responses/429"
      security:
      - bearerAuth: []
      tags:
      - Block Drafts
  /blocks:
    get:
      description: Lists blocks.
      operationId: getBlocks
      parameters:
      - description: Name of folder whose content will be listed.
        in: query
        name: folder
        schema:
          type: string
      - description: Number of items to skip before starting to collect the resulting
          set.
        in: query
        name: offset
        schema:
          type: integer
          format: int32
          default: 0
          minimum: 0
      - description: Number of items to return (max. 100).
        in: query
        name: limit
        schema:
          type: integer
          format: int32
          default: 20
          maximum: 100
          minimum: 0
      - description: Determines whether to include metadata in the response.
        in: query
        name: includeMetadata
        schema:
          type: boolean
          default: false
      - content:
          '*/*':
            examples:
              Document category == A && Document category != B:
                description: Document category == A && Document category != B
                summary: Document category == A && Document category != B
                value:
                  operator: and
                  conditions:
                  - negation: false
                    categorizations:
                    - negation: false
                      name: General
                      fieldName: Document category
                      value: A
                      operator: equal
                  - negation: false
                    categorizations:
                    - negation: true
                      name: General
                      fieldName: Document category
                      value: B
                      operator: equal
            schema:
              $ref: "#/components/schemas/Condition"
        description: Conditions can be nested and can contain the same elements as
          the main condition. See the Condition schema.
        in: query
        name: condition
      - description: List blocks that the specified user can see.
        in: query
        name: holder
        schema:
          type: string
      - description: "List blocks that have the specified approval states, separated\
          \ by a colon."
        example: Production:Testing
        in: query
        name: approvalStates
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/BlockList"
          description: List of blocks.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "400":
          content:
            application/json;charset=UTF-8:
              examples:
                HTTP 400 error code validation error.:
                  description: HTTP 400 error code validation error.
                  summary: HTTP 400 error code when getting blocks.
                  value:
                    status: 400
                    title: The 'limit' parameter has invalid value.
                    code: "10200001"
                    detail: Value must be > 0 and <= 100.
              schema:
                $ref: "#/components/schemas/ApiBadRequestException"
          description: Validation errors.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "401":
          $ref: "#/components/responses/401"
        "429":
          $ref: "#/components/responses/429"
      security:
      - bearerAuth: []
      tags:
      - Blocks
  /contentManagement/cloneWithDependencies:
    post:
      description: Clones objects with dependencies.
      operationId: cloneWithDependencies
      requestBody:
        content:
          application/json;charset=UTF-8:
            examples:
              Clone with dependencies - defined settings.:
                description: Clone with dependencies - defined settings.
                summary: Clone with dependencies - defined settings.
                value:
                  files:
                  - srcPath: map://interactive/BaseTemplates/BaseTemplate.wfd
                    dstPath: map://interactive/BaseTemplates/MyFolder/MyBaseTemplate.wfd
                  dependencies:
                  - srcPath: map://interactive/CompanyStyles/StyleDefinition.jld
                    dstPath: map://interactive/CompanyStyles/MyFolder/MyStyleDefinition.jld
                    operation: create
                  - srcPath: map://interactive/Resources/Fonts/calibri.ttf
                    dstPath: map://interactive/Resources/Fonts/MyFolder/calibri.ttf
                    operation: reuse
                  - srcPath: map://interactive/Resources/Fonts/calibrii.ttf
                    operation: nothing
            schema:
              $ref: "#/components/schemas/CloneWithDependenciesSettings"
        description: "Defines how objects will be cloned. For objects (files) and\
          \ their dependencies, define their source path and destination path. For\
          \ dependencies, also define the operation (nothing = uses the original dependency,\
          \ create = clones the dependency to the defined destination path, reuse\
          \ = uses the file at the defined destination path instead of the original\
          \ dependency)."
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              examples:
                HTTP 200 code - success response:
                  description: HTTP 200 code - success response
                  summary: HTTP 200 code - success response during Clone With Dependencies
                  value:
                    result: ok
                    details:
                      files:
                      - srcPath: map://interactive/BaseTemplates/BaseTemplate.wfd
                        dstPath: map://interactive/BaseTemplates/MyFolder/MyBaseTemplate.wfd
                        result: ok
                      dependencies:
                      - srcPath: map://interactive/CompanyStyles/StyleDefinition.jld
                        dstPath: map://interactive/CompanyStyles/MyFolder/MyStyleDefinition.jld
                        operation: create
                        result: ok
                      - srcPath: map://interactive/Resources/Fonts/calibri.ttf
                        dstPath: map://interactive/Resources/Fonts/MyFolder/calibri.ttf
                        operation: reuse
                        result: ok
                      - srcPath: map://interactive/Resources/Fonts/calibrii.ttf
                        dstPath: null
                        operation: nothing
                        result: ok
              schema:
                $ref: "#/components/schemas/CloneWithDependenciesResult"
          description: List of cloned files and dependencies.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "400":
          content:
            application/json;charset=UTF-8:
              examples:
                HTTP 400 error code validation error:
                  description: HTTP 400 error code validation error
                  summary: HTTP 400 error code during Clone With Dependencies
                  value:
                    status: 400
                    title: Clone With Dependencies failed.
                    code: 10200001
                    detail: Clone With Dependencies could not be performed.
              schema:
                $ref: "#/components/schemas/ApiBadRequestException"
          description: Validation errors.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "401":
          $ref: "#/components/responses/401"
        "429":
          $ref: "#/components/responses/429"
      security:
      - bearerAuth: []
      tags:
      - Content Management
  /contentManagement/extractContent:
    get:
      description: Exports content of an object.
      operationId: extractObjectContent
      parameters:
      - description: Path to the object.
        example: Interactive/StandardPackage/Templates/StandardDemo/Celeste/Celeste
          Loan Offer.jld
        in: query
        name: path
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              examples:
                ? HTTP 200 code - Content exported from the object. It is grouped
                  according to areas (templates – all document areas are listed, blocks
                  – a single block area is listed, base templates – page, email, and
                  SMS areas are listed).
                : description: "HTTP 200 code - Content exported from the object.\
                    \ It is grouped according to areas (templates – all document areas\
                    \ are listed, blocks – a single block area is listed, base templates\
                    \ – page, email, and SMS areas are listed)."
                  summary: HTTP 200 code - success response
                  value:
                    path: Interactive/StandardPackage/Templates/StandardDemo/Celeste/Celeste
                      Loan Offer.jld
                    content:
                      Areas:
                      - Name: Letter Content
                        Type: Template
                        Content: "Dear , \nFollowing our chat, I'm sending you the\
                          \ outline of your Rent As You Go loan based on the options\
                          \ we've put together. When you review the details you can\
                          \ follow the sign-up procedure in the Celeste loan portal.\n\
                          RENT AS YOU GO\n/Month\nDELAYED PAYMENT\nmonths\n \n \n\
                          LENGH\nyears\nTOTAL AMOUNT\nANNUAL INTEREST RATE\nOne Last\
                          \ Step, \n \n we just need to confirm your ISIC number so\
                          \ you can take advantage of student loan program conditions.\
                          \ Please make sure you have your ISIC at the ready when\
                          \ going through the sign-up procedure.\nYours sincerely\n\
                          Head of Sharedealing, \nCELESTE Bank Global Markets"
                      - Name: Email Content
                        Type: Template
                        Content: "CELESTE BANK \nRossdhu House, 77 Traill Street,\
                          \ G83 2ZX \nwww.celestebank.com | 078 0831 3617\nIMPORTANT\
                          \ ACCOUNT INFORMATION\r\rAccount Number:\nPrimary Account\
                          \ Holder:\n \nProduct Type:\nPremier Wealth\nONLINE ACCESS\
                          \ TO YOUR ACCOUNT:\rVisit www.celestebank.com to access\
                          \ your account information\nLIVE CUSTOMER SERVICE 24/7:\r\
                          CALL: 078 0831 1234\rEMAIL: SERVICE@celestebank.com\nDear\
                          \ ,\nDate:\n \nFollowing our chat, I'm sending you the outline\
                          \ of your Rent As You Go loan based on the options we've\
                          \ put together. When you review the details you can follow\
                          \ the sign-up procedure in the Celeste loan portal.\nRENT\
                          \ AS YOU GO\n/Month\nDELAYED PAYMENT\nmonths\nLENGTH\nyears\n\
                          TOTAL AMOUNT\nEUR\nANNUAL INTEREST RATE\nOne Last Step,\
                          \ \n \n we just need to confirm your ISIC number so you\
                          \ can take advantage of student loan program conditions.\
                          \ Please make sure you have your ISIC at the ready when\
                          \ going through the sign-up procedure.\nYours sincerely\n\
                          Head of Sharedealing, \nCELESTE Bank Global Markets"
              schema:
                $ref: "#/components/schemas/ExtractObjectContentResult"
          description: Extract content from object.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "400":
          content:
            application/json;charset=UTF-8:
              examples:
                HTTP 400 error code validation error:
                  description: HTTP 400 error code validation error
                  summary: HTTP 400 error code during Extract content from object
                  value:
                    status: 400
                    title: Content export failed.
                    code: 10200001
                    detail: The object’s content could not be exported. Unable to
                      open input file vcs://Interactive/StandardPackage/Templates/StandardDemo/Celeste/Celeste
                      Loan Offer1.jld
              schema:
                $ref: "#/components/schemas/ApiBadRequestException"
          description: Validation errors.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "401":
          $ref: "#/components/responses/401"
        "429":
          $ref: "#/components/responses/429"
      security:
      - bearerAuth: []
      tags:
      - Content Management
  /formTemplates:
    get:
      description: Lists Form templates.
      operationId: getFormTemplates
      parameters:
      - description: Name of folder whose content will be listed.
        in: query
        name: folder
        schema:
          type: string
      - description: Number of items to skip before starting to collect the resulting
          set.
        in: query
        name: offset
        schema:
          type: integer
          format: int32
          default: 0
          minimum: 0
      - description: Number of items to return (max. 100).
        in: query
        name: limit
        schema:
          type: integer
          format: int32
          default: 20
          maximum: 100
          minimum: 0
      - description: Determines whether to include metadata in the response.
        in: query
        name: includeMetadata
        schema:
          type: boolean
          default: false
      - content:
          '*/*':
            examples:
              Document category == A && Document category != B:
                description: Document category == A && Document category != B
                summary: Document category == A && Document category != B
                value:
                  operator: and
                  conditions:
                  - negation: false
                    categorizations:
                    - negation: false
                      name: General
                      fieldName: Document category
                      value: A
                      operator: equal
                  - negation: false
                    categorizations:
                    - negation: true
                      name: General
                      fieldName: Document category
                      value: B
                      operator: equal
            schema:
              $ref: "#/components/schemas/Condition"
        description: Conditions can be nested and can contain the same elements as
          the main condition. See the Condition schema.
        in: query
        name: condition
      - description: List Form templates that the specified user can see.
        in: query
        name: holder
        schema:
          type: string
      - description: "List Form templates that have the specified approval states,\
          \ separated by a colon."
        example: Production:Testing
        in: query
        name: approvalStates
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/FormTemplateList"
          description: List of Form templates.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "400":
          content:
            application/json;charset=UTF-8:
              examples:
                HTTP 400 error code validation error.:
                  description: HTTP 400 error code validation error.
                  summary: HTTP 400 error code when getting Form templates.
                  value:
                    status: 400
                    title: The 'limit' parameter has invalid value.
                    code: "10200001"
                    detail: Value must be > 0 and <= 100.
              schema:
                $ref: "#/components/schemas/ApiBadRequestException"
          description: Validation errors.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "401":
          $ref: "#/components/responses/401"
        "429":
          $ref: "#/components/responses/429"
      security:
      - bearerAuth: []
      tags:
      - FormTemplates
  /resources:
    post:
      description: Uploads a resource to Content Manager.
      operationId: uploadResource
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UploadResource"
      responses:
        "201":
          description: The resource uploaded successfully.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "400":
          content:
            '*/*':
              examples:
                The file format does not match the extension.:
                  description: The file format does not match the extension.
                  summary: Change the extension or the file.
                  value:
                    status: 400
                    title: The file does not have compatible extension and header
                      bytes.
                    code: "10200001"
                    detail: File does not have compatible extension and header bytes.
                The resource already exists in Content Manager.:
                  description: The resource already exists in Content Manager.
                  summary: Use a different directory or name.
                  value:
                    status: 400
                    title: The file already exists.
                    code: "10200001"
                    detail: File 'icm://Interactive/StandardPackage/Resources/Images/Test.jpeg'
                      exists in ICM.
                Unsupported MIME type.:
                  description: Unsupported MIME type.
                  summary: Upload a file of a supported MIME type.
                  value:
                    status: 400
                    title: Unsupported Mime-Type.
                    code: "10200001"
                    detail: "Supported Mime-Types: [image/png, image/jpeg, image/bmp,\
                      \ image/gif]."
                Uploaded file has invalid size.:
                  description: Uploaded file has invalid size.
                  summary: Upload a smaller file.
                  value:
                    status: 400
                    title: The uploaded file has an invalid size.
                    code: "10200001"
                    detail: The uploaded image has an invalid size (25000x25000)
              schema:
                $ref: "#/components/schemas/ApiBadRequestException"
          description: Validation error.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "401":
          $ref: "#/components/responses/401"
        "429":
          $ref: "#/components/responses/429"
      security:
      - bearerAuth: []
      tags:
      - Resources
  /ruleDraft/createFromJson:
    post:
      description: Creates a rule draft from a JSON file.
      operationId: createRuleDraftFromJson
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreateRuleDraftMultipartRequestBody"
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              examples:
                Rule draft creation response:
                  description: Rule draft creation response
                  summary: HTTP 201 code when creating a rule draft
                  value:
                    guid: 32c844bb-5bc2-452b-b1be-a04eb626d9a1
                    url: https://company.inspirecloud.net/authoring/?rule-draft-id=085d47ac-104d-43a3-9e7c-626f68ce552b
              schema:
                $ref: "#/components/schemas/CreateDraftWithVFFResult"
          description: Rule Draft created.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "400":
          content:
            application/json;charset=UTF-8:
              examples:
                Validation error.:
                  description: Validation error.
                  summary: HTTP 400 error code when creating a rule draft
                  value:
                    status: 400
                    title: Invalid name.
                    code: 10200001
                    detail: '''displayRule;jrd'' contains invalid char '';''.'
              schema:
                $ref: "#/components/schemas/ApiBadRequestException"
          description: Validation errors.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "401":
          $ref: "#/components/responses/401"
        "429":
          $ref: "#/components/responses/429"
      security:
      - bearerAuth: []
      tags:
      - Rule Drafts
  /server:
    get:
      description: Returns server state
      operationId: getServerState
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ServerStateModel"
          description: The server state in JSON format
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "429":
          $ref: "#/components/responses/429"
      tags:
      - Server
  /server/auditLog:
    get:
      description: |-
        Returns an audit log for the specified time range in the CSV format.
        If the X-INCOMPLETE header is true, the list is incomplete because the number of events for the given time range is over the limit of 20 000.
        Only users with the Application Administrator permission can use this endpoint.

        Caution: If you use both Content Author and Front Office, the audit log lists events of both services.
      operationId: auditLog
      parameters:
      - description: "DateTime value from which audit log events will be included.\
          \ Format is [yyyy-MM-dd'T'HH:mm:ssXXX]."
        example: 2020-09-17T04:58:29+01:00
        in: query
        name: from
        required: true
        schema:
          type: string
      - description: "DateTime value to which audit log events will be included. If\
          \ the value of the X-INCOMPLETE header is true, the list of events is incomplete.\
          \ Only the first 20 000 events are returned. Format is [yyyy-MM-dd'T'HH:mm:ssXXX]."
        example: 2020-09-17T04:58:29+01:00
        in: query
        name: to
        required: true
        schema:
          type: string
      - description: Define offset of audit log query.
        example: 28
        in: query
        name: offset
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Returns an audit log for the specified time range in the CSV
            format.
          headers:
            X-INCOMPLETE:
              description: "If the value is true, the list is incomplete. Only the\
                \ first 20 000 events are returned."
              schema:
                type: boolean
              style: simple
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "401":
          $ref: "#/components/responses/401"
        "429":
          $ref: "#/components/responses/429"
      security:
      - bearerAuth: []
      tags:
      - Server
  /server/health:
    get:
      description: Checks if the application and all essential components are running.
      operationId: getServerHealth
      responses:
        "200":
          description: The application and all essential componets are running.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "429":
          $ref: "#/components/responses/429"
        "503":
          description: The application and/or one or more essential components are
            not running.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
      tags:
      - Server
  /templateDraft/createFromJson:
    post:
      description: Creates a template draft from a JSON file.
      operationId: createTemplateDraftFromJson
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreateTemplateDraftMultipartRequestBody"
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              examples:
                Template draft creation response.:
                  description: Template draft creation response.
                  summary: HTTP 201 code when creating a template draft
                  value:
                    draft: {}
                    result:
                      contentMigrationResult:
                        Result: Ok
                      valid: true
              schema:
                $ref: "#/components/schemas/DraftJsonIpsResult"
          description: Template Draft created.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "400":
          content:
            application/json;charset=UTF-8:
              examples:
                Validation error:
                  description: Validation error
                  summary: HTTP 400 error code when creating a template draft
                  value:
                    status: 400
                    title: The parameter has invalid value.
                    code: "10200001"
                    detail: File not found on path 'icm://Interactive/StandardPackage/BaseTemplates/INVALID_TEMPLATE.wfd'.
              schema:
                $ref: "#/components/schemas/ApiBadRequestException"
          description: Validation errors.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "401":
          $ref: "#/components/responses/401"
        "429":
          $ref: "#/components/responses/429"
      security:
      - bearerAuth: []
      tags:
      - Template Drafts
  /templateDraft/createWithVFF:
    post:
      description: Creates a template draft with variable formatted flows.
      operationId: createTemplateDraftWithVFF
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
              - $ref: "#/components/schemas/CreateTemplateDraftWithVFFType"
              - $ref: "#/components/schemas/VariableFormattedFlows"
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              examples:
                Template draft creation response:
                  description: Template draft creation response
                  summary: HTTP 201 code when creating a template draft
                  value:
                    guid: 32c844bb-5bc2-452b-b1be-a04eb626d9a1
                    url: https://company.inspirecloud.net/authoring/?template-draft-id=32c844bb-5bc2-452b-b1be-a04eb626d9a1
              schema:
                $ref: "#/components/schemas/CreateDraftWithVFFResult"
          description: Template Draft created.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "400":
          content:
            application/json;charset=UTF-8:
              examples:
                Validation error.:
                  description: Validation error.
                  summary: HTTP 400 error code when creating a template draft
                  value:
                    status: 400
                    title: The parameter has invalid value.
                    code: "10200001"
                    detail: File not found on path 'icm://Interactive/StandardPackage/BaseTemplates/INVALID_TEMPLATE.wfd'.
              schema:
                $ref: "#/components/schemas/ApiBadRequestException"
          description: Validation errors.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "401":
          $ref: "#/components/responses/401"
        "429":
          $ref: "#/components/responses/429"
      security:
      - bearerAuth: []
      tags:
      - Template Drafts
  /templates:
    get:
      description: Lists templates.
      operationId: getTemplates
      parameters:
      - description: Name of folder whose content will be listed.
        in: query
        name: folder
        schema:
          type: string
      - description: Number of items to skip before starting to collect the resulting
          set.
        in: query
        name: offset
        schema:
          type: integer
          format: int32
          default: 0
          minimum: 0
      - description: Number of items to return (max. 100).
        in: query
        name: limit
        schema:
          type: integer
          format: int32
          default: 20
          maximum: 100
          minimum: 0
      - description: Determines whether to include metadata in the response.
        in: query
        name: includeMetadata
        schema:
          type: boolean
          default: false
      - content:
          '*/*':
            examples:
              Document category == A && Document category != B:
                description: Document category == A && Document category != B
                summary: Document category == A && Document category != B
                value:
                  operator: and
                  conditions:
                  - negation: false
                    categorizations:
                    - negation: false
                      name: General
                      fieldName: Document category
                      value: A
                      operator: equal
                  - negation: false
                    categorizations:
                    - negation: true
                      name: General
                      fieldName: Document category
                      value: B
                      operator: equal
            schema:
              $ref: "#/components/schemas/Condition"
        description: Conditions can be nested and can contain the same elements as
          the main condition. See the Condition schema.
        in: query
        name: condition
      - description: List templates that the specified user can see.
        in: query
        name: holder
        schema:
          type: string
      - description: "List templates that have the specified approval states, separated\
          \ by a colon."
        example: Production:Testing
        in: query
        name: approvalStates
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/TemplateList"
          description: List of templates.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "400":
          content:
            application/json;charset=UTF-8:
              examples:
                HTTP 400 error code validation error.:
                  description: HTTP 400 error code validation error.
                  summary: HTTP 400 error code when getting templates.
                  value:
                    status: 400
                    title: The 'limit' parameter has invalid value.
                    code: "10200001"
                    detail: Value must be > 0 and <= 100.
              schema:
                $ref: "#/components/schemas/ApiBadRequestException"
          description: Validation errors.
          headers:
            X-RateLimit-Limit:
              $ref: "#/components/headers/X-RateLimit-Limit"
            X-RateLimit-Remaining:
              $ref: "#/components/headers/X-RateLimit-Remaining"
            X-RateLimit-Reset:
              $ref: "#/components/headers/X-RateLimit-Reset"
        "401":
          $ref: "#/components/responses/401"
        "429":
          $ref: "#/components/responses/429"
      security:
      - bearerAuth: []
      tags:
      - Templates
components:
  headers:
    X-RateLimit-Limit:
      description: The maximum number of requests that the user is allowed to make
        per rate limit window
      schema:
        type: integer
    X-RateLimit-Remaining:
      description: The number of requests remaining in the current rate limit window
      schema:
        type: integer
    X-RateLimit-Reset:
      description: The time when the current rate limit window resets (in UTC epoch
        seconds)
      schema:
        type: integer
  responses:
    "401":
      description: Authentication information is missing or invalid.
      headers:
        WWW_Authenticate:
          schema:
            type: string
    "429":
      description: Too Many Requests
      headers:
        X-RateLimit-Limit:
          $ref: "#/components/headers/X-RateLimit-Limit"
        X-RateLimit-Remaining:
          $ref: "#/components/headers/X-RateLimit-Remaining"
        X-RateLimit-Reset:
          $ref: "#/components/headers/X-RateLimit-Reset"
  schemas:
    AbstractDraft:
      type: object
      properties:
        approvalPackage:
          $ref: "#/components/schemas/ApprovalPackageInfo"
        categorizationExceptionAllowed:
          type: boolean
        dataItemId:
          type: string
        dataType:
          type: string
        displayName:
          type: string
        externalPath:
          type: string
        folder:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
        namespace:
          type: string
        validFrom:
          type: string
          format: date-time
    ApiBadRequestException:
      type: object
      properties:
        cause:
          type: object
          properties:
            localizedMessage:
              type: string
            message:
              type: string
            stackTrace:
              type: array
              items:
                type: object
                properties:
                  classLoaderName:
                    type: string
                  className:
                    type: string
                  fileName:
                    type: string
                  lineNumber:
                    type: integer
                    format: int32
                  methodName:
                    type: string
                  moduleName:
                    type: string
                  moduleVersion:
                    type: string
                  nativeMethod:
                    type: boolean
        code:
          type: integer
          format: int32
        detail:
          type: string
        localizedMessage:
          type: string
        message:
          type: string
        response:
          $ref: "#/components/schemas/Response"
        stackTrace:
          type: array
          items:
            type: object
            properties:
              classLoaderName:
                type: string
              className:
                type: string
              fileName:
                type: string
              lineNumber:
                type: integer
                format: int32
              methodName:
                type: string
              moduleName:
                type: string
              moduleVersion:
                type: string
              nativeMethod:
                type: boolean
        suppressed:
          type: array
          items:
            type: object
            properties:
              localizedMessage:
                type: string
              message:
                type: string
              stackTrace:
                type: array
                items:
                  type: object
                  properties:
                    classLoaderName:
                      type: string
                    className:
                      type: string
                    fileName:
                      type: string
                    lineNumber:
                      type: integer
                      format: int32
                    methodName:
                      type: string
                    moduleName:
                      type: string
                    moduleVersion:
                      type: string
                    nativeMethod:
                      type: boolean
        title:
          type: string
    ApprovalPackageInfo:
      type: object
      properties:
        displayName:
          type: string
        folder:
          type: string
        guid:
          type: string
        name:
          type: string
    BaseTemplateItem:
      type: object
      properties:
        edited:
          type: boolean
          description: Indicates whether the Base template has been edited.
          example: false
        folder:
          type: string
          description: Base template folder name.
          example: GeneralCondBaseTemplate
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/MetadataItem"
        name:
          type: string
          description: Base template name.
          example: General Conditions
        version:
          type: integer
          format: int32
          description: Base template version.
          example: 101
    BaseTemplateList:
      type: object
      properties:
        baseTemplates:
          type: array
          items:
            $ref: "#/components/schemas/BaseTemplateItem"
        totalCount:
          type: integer
          format: int32
    BlockItem:
      type: object
      properties:
        edited:
          type: boolean
          description: Indicates whether the block has been edited.
          example: false
        folder:
          type: string
          description: Block folder name.
          example: GeneralCondBlock
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/MetadataItem"
        name:
          type: string
          description: Block name.
          example: General Conditions
        version:
          type: integer
          format: int32
          description: Block version.
          example: 101
    BlockList:
      type: object
      properties:
        blocks:
          type: array
          items:
            $ref: "#/components/schemas/BlockItem"
        totalCount:
          type: integer
          format: int32
    CategorizationCondition:
      type: object
      properties:
        fieldName:
          type: string
          description: Condition field name.
          example: Document category
        name:
          type: string
          description: Condition name.
          example: General
        negation:
          type: boolean
          description: Condition negation.
          example: false
        operator:
          type: string
          description: "String occurence operator (enumeration of values equal, less,\
            \ lessOrEqual...)."
          enum:
          - equal
          - less
          - lessOrEqual
          - more
          - moreOrEqual
          - beginWith
          - beginWithCaseInsensitive
          - endWith
          - endWithCaseInsensitive
          - contains
          - containsCaseInsensitive
          - isValid
          - empty
          example: equal
        value:
          type: string
          description: Condition value.
          example: A
    CloneDependency:
      type: object
      properties:
        dstPath:
          type: string
        operation:
          type: string
          enum:
          - nothing
          - create
          - reuse
        srcPath:
          type: string
    CloneFileSettings:
      type: object
      properties:
        dstPath:
          type: string
        srcPath:
          type: string
    CloneResultDependencyDetail:
      type: object
      properties:
        conflicts:
          type: array
          items:
            type: string
        dstPath:
          type: string
        namespace:
          type: string
        operation:
          type: string
          enum:
          - nothing
          - create
          - reuse
        result:
          type: string
        srcPath:
          type: string
        type:
          type: string
    CloneResultDetails:
      type: object
      properties:
        dependencies:
          type: array
          items:
            $ref: "#/components/schemas/CloneResultDependencyDetail"
        files:
          type: array
          items:
            $ref: "#/components/schemas/CloneResultFileDetail"
    CloneResultFileDetail:
      type: object
      properties:
        dstPath:
          type: string
        result:
          type: string
        srcPath:
          type: string
    CloneWithDependenciesResult:
      type: object
      properties:
        details:
          $ref: "#/components/schemas/CloneResultDetails"
        result:
          type: string
    CloneWithDependenciesSettings:
      type: object
      properties:
        dependencies:
          type: array
          items:
            $ref: "#/components/schemas/CloneDependency"
        files:
          type: array
          items:
            $ref: "#/components/schemas/CloneFileSettings"
    Condition:
      type: object
      properties:
        categorizations:
          type: array
          items:
            $ref: "#/components/schemas/CategorizationCondition"
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/_Condition"
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/MetadataCondition"
        negation:
          type: boolean
          description: Condition negation.
          example: false
        operator:
          type: string
          description: "Logical operator (and, or)."
          enum:
          - and
          - or
          example: or
    ContentMigrationResult:
      type: object
      properties:
        Result:
          type: string
          enum:
          - Ok
          - Warning
          - Error
          - FatalError
        details:
          type: object
          additionalProperties:
            type: object
    CreateBlockDraftMultipartRequestBody:
      type: object
      properties:
        baseTemplatePath:
          type: string
          description: "Path to an existing base template in Content Author. Draft\
            \ will be based on this base template. You can find the path to the base\
            \ template in the View Version dialog in Content Manager. Example: \"\
            icm:S:Production:S:UserResource//Interactive/StandardPackage/BaseTemplates/Letterhead\
            \ with advert.wfd\""
        folder:
          type: string
          description: "Name of the folder where the block draft will be created.\
            \ If left empty, the draft will be created in the Blocks root folder.\
            \ Enter \"Migrated Content\" if you want the draft to be created in the\
            \ \"Blocks/Migrated Content\" subfolder."
        holder:
          type: string
          description: "User or group name to which the block draft will be assigned.\
            \ Specify the holder type via the \"holderType\" property. Example: \"\
            template designer\""
        holderType:
          type: string
          default: userName
          description: "Specifies the type of the \"holder\" property, i.e. use \"\
            userName\" for users or \"userGroup\" for groups. If not specified, uses\
            \ \"userName\" by default. Example: \"userGroup\""
          enum:
          - userName
          - userGroup
        ignoreMissingTableStyles:
          type: boolean
          description: |-
            If set to true, table and border styles specified in the JSON file are ignored. The styles will not be applied in the newly created block draft.
            This allows you to migrate content even if some styles are not defined in Content Author.
        jsonData:
          type: object
          format: binary
          description: JSON file (max 10 MB) prepared using a script in Inspire Designer.
            See the Content Migration chapter in Content Author Configuration Guide.
        name:
          type: string
          description: Name of the block draft.
        state:
          type: string
          description: "Initial state (ID) of the block draft. The state must already\
            \ exist in the block approval process. Example: \"S_block_scenario_assigned\""
      required:
      - baseTemplatePath
      - holder
      - name
      - state
    CreateBlockDraftWithVFFType:
      type: object
      properties:
        baseTemplatePath:
          type: string
          description: "Path to an existing base template in Content Author. Draft\
            \ will be based on this base template. You can find the path to the base\
            \ template in the View Version dialog in Content Manager. Example: \"\
            icm:S:Production:S:UserResource//Interactive/StandardPackage/BaseTemplates/Letterhead\
            \ with advert.wfd\""
        folder:
          type: string
          description: "Name of the folder where the block draft will be created.\
            \ If left empty, the draft will be created in the Blocks root folder.\
            \ Enter \"Migrated Content\" if you want the draft to be created in the\
            \ \"Blocks/Migrated Content\" subfolder."
        holder:
          type: string
          description: "User or group name to which the block draft will be assigned.\
            \ Specify the holder type via the \"holderType\" property. Example: \"\
            template designer\""
        holderType:
          type: string
          default: userName
          description: "Specifies the type of the \"holder\" property, i.e. use \"\
            userName\" for users or \"userGroup\" for groups. If not specified, uses\
            \ \"userName\" by default. Example: \"userGroup\""
          enum:
          - userName
          - userGroup
        name:
          type: string
          description: Name of the block draft.
        state:
          type: string
          description: "Initial state (ID) of the block draft. The state must already\
            \ exist in the block approval process. Example: \"S_block_scenario_assigned\""
      required:
      - baseTemplatePath
      - holder
      - name
      - state
    CreateDraftResult:
      type: object
      properties:
        contentMigrationResult:
          $ref: "#/components/schemas/ContentMigrationResult"
        valid:
          type: boolean
    CreateDraftWithVFFResult:
      type: object
      properties:
        guid:
          type: string
        path:
          type: string
        url:
          type: string
    CreateRuleDraftMultipartRequestBody:
      type: object
      properties:
        baseTemplatePath:
          type: string
          description: "Path to an existing base template in Content Author. Draft\
            \ will be based on this base template. You can find the path to the base\
            \ template in the View Version dialog in Content Manager. Example: \"\
            icm:S:Production:S:UserResource//Interactive/StandardPackage/BaseTemplates/Letterhead\
            \ with advert.wfd\""
        folder:
          type: string
          description: "Name of the folder where the rule draft will be created. If\
            \ left empty, the draft will be created in the Rules root folder. Enter\
            \ \"Migrated Content\" if you want the draft to be created in the \"Rules/Migrated\
            \ Content\" subfolder."
        holder:
          type: string
          description: "User to which the rule draft will be assigned. Example: \"\
            template designer\""
        holderType:
          type: string
          default: userName
          description: "Specifies the type of the \"holder\" property, i.e. use \"\
            userName\" for users or \"userGroup\" for groups. If not specified, uses\
            \ \"userName\" by default. Example: \"userGroup\""
          enum:
          - userName
          - userGroup
        jsonData:
          type: object
          format: binary
          description: JSON file (max 10 MB) prepared using a script in Inspire Designer.
            See the Content Migration chapter in Content Author Configuration Guide.
        name:
          type: string
          description: Name of the rule draft.
        state:
          type: string
          description: "Initial state (ID) of the rule draft. The state must already\
            \ exist in the rule approval process. Example: \"S_rule_scenario_assigned\""
      required:
      - baseTemplatePath
      - holder
      - jsonData
      - name
      - state
    CreateTemplateDraftMultipartRequestBody:
      type: object
      properties:
        baseTemplatePath:
          type: string
          description: "Path to an existing base template in Content Author. Draft\
            \ will be based on this base template. You can find the path to the base\
            \ template in the View Version dialog in Content Manager. Example: \"\
            icm:S:Production:S:UserResource//Interactive/StandardPackage/BaseTemplates/Letterhead\
            \ with advert.wfd\""
        folder:
          type: string
          description: "Name of the folder where the template draft will be created.\
            \ If left empty, the draft will be created in the Templates root folder.\
            \ Enter \"Migrated Content\" if you want the draft to be created in the\
            \ \"Templates/Migrated Content\" subfolder."
        holder:
          type: string
          description: "User or group name to which the template draft will be assigned.\
            \ Specify the holder type via the \"holderType\" property. Example: \"\
            template designer\""
        holderType:
          type: string
          default: userName
          description: "Specifies the type of the \"holder\" property, i.e. use \"\
            userName\" for users or \"userGroup\" for groups. If not specified, uses\
            \ \"userName\" by default. Example: \"userGroup\""
          enum:
          - userName
          - userGroup
        ignoreMissingTableStyles:
          type: boolean
          description: |-
            If set to true, table and border styles specified in the JSON file are ignored. The styles will not be applied in the newly created template draft.
            This allows you to migrate content even if some styles are not defined in Content Author.
        jsonData:
          type: object
          format: binary
          description: JSON file (max 10 MB) prepared using a script in Inspire Designer.
            See the Content Migration chapter in Content Author Configuration Guide.
        name:
          type: string
          description: Name of the template draft.
        state:
          type: string
          description: "Initial state (ID) of the template draft. The state must already\
            \ exist in the template approval process. Example: \"S_template_scenario_assigned\""
      required:
      - baseTemplatePath
      - holder
      - name
      - state
    CreateTemplateDraftWithVFFType:
      type: object
      properties:
        baseTemplatePath:
          type: string
          description: "Enter the Inspire Content Manager path to the template from\
            \ which the template draft will be created. The path can contain further\
            \ specification, e.g. state:label Specifying only the file name without\
            \ approval states automatically takes into account all values in the relatedStates\
            \ and the UserResourceState element in the configuration.xml file."
        description:
          type: string
          description: Define the description of the template draft.
        folder:
          type: string
          description: Specify an existing folder for storing the template draft.
        holder:
          type: string
          description: "User or group name to which the block draft will be assigned.\
            \ Specify the holder type via the \"holderType\" property. Example: \"\
            template designer\""
        holderType:
          type: string
          default: userName
          description: "Specifies the type of the \"holder\" property, i.e. use \"\
            userName\" for users or \"userGroup\" for groups. If not specified, uses\
            \ \"userName\" by default. Example: \"userGroup\""
          enum:
          - userName
          - userGroup
        name:
          type: string
          description: Define the name of the template draft.
        state:
          type: string
          description: Set the approval process state that is to be assigned to this
            draft.
      required:
      - baseTemplatePath
      - description
      - holder
      - name
      - state
    DraftJsonIpsResult:
      type: object
      properties:
        draft:
          $ref: "#/components/schemas/AbstractDraft"
        result:
          $ref: "#/components/schemas/CreateDraftResult"
    EntityTag:
      type: object
      properties:
        value:
          type: string
        weak:
          type: boolean
    ExtractObjectContentResult:
      type: object
      properties:
        content:
          $ref: "#/components/schemas/JsonNode"
        path:
          type: string
    FormTemplateItem:
      type: object
      properties:
        edited:
          type: boolean
          description: Indicates whether the Form template has been edited.
          example: false
        folder:
          type: string
          description: Form template folder name.
          example: GeneralCondFormTemplate
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/MetadataItem"
        name:
          type: string
          description: Form template name.
          example: General Conditions
        version:
          type: integer
          format: int32
          description: Form template version.
          example: 101
    FormTemplateList:
      type: object
      properties:
        formTemplates:
          type: array
          items:
            $ref: "#/components/schemas/FormTemplateItem"
        totalCount:
          type: integer
          format: int32
    JsonNode:
      type: object
    Link:
      type: object
      properties:
        params:
          type: object
          additionalProperties:
            type: string
        rel:
          type: string
        rels:
          type: array
          items:
            type: string
        title:
          type: string
        type:
          type: string
        uri:
          type: string
          format: uri
        uriBuilder:
          $ref: "#/components/schemas/UriBuilder"
    MediaType:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            type: string
        subtype:
          type: string
        type:
          type: string
        wildcardSubtype:
          type: boolean
        wildcardType:
          type: boolean
    MetadataCondition:
      type: object
      properties:
        name:
          type: string
          description: Metadata field name.
          example: Guid
        negation:
          type: boolean
          description: Metadata condition negation.
          example: false
        operator:
          type: string
          description: "String occurence operator (enumeration of values equal, less,\
            \ lessOrEqual...)."
          enum:
          - equal
          - less
          - lessOrEqual
          - more
          - moreOrEqual
          - beginWith
          - beginWithCaseInsensitive
          - endWith
          - endWithCaseInsensitive
          - contains
          - containsCaseInsensitive
          - isValid
          - exists
          - empty
          example: equal
        value:
          type: string
          description: Metadata field value.
          example: 6E8F2009340E0A448374B2D22ADE8E6B
    MetadataItem:
      type: object
      properties:
        name:
          type: string
          description: Metadata name.
          example: Channels
        values:
          type: array
          description: Metadata value.
          example:
          - Print
          - Email
          items:
            type: object
            description: Metadata value.
            example:
            - Print
            - Email
    MultivaluedMapStringObject:
      type: object
      additionalProperties:
        type: array
        items:
          type: object
      properties:
        empty:
          type: boolean
    MultivaluedMapStringString:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
      properties:
        empty:
          type: boolean
    NewCookie:
      type: object
      properties:
        comment:
          type: string
        domain:
          type: string
        expiry:
          type: string
          format: date-time
        httpOnly:
          type: boolean
        maxAge:
          type: integer
          format: int32
        name:
          type: string
        path:
          type: string
        sameSite:
          type: string
          enum:
          - NONE
          - LAX
          - STRICT
        secure:
          type: boolean
        value:
          type: string
        version:
          type: integer
          format: int32
    NodePathType:
      type: object
      description: Define a NodePath where the variable formatted flow is to be placed
      properties:
        node:
          type: array
          description: The NodePath consists of 1 or more individual nodes that together
            form the complete path.
          items:
            type: string
            description: The NodePath consists of 1 or more individual nodes that
              together form the complete path.
    Response:
      type: object
      properties:
        allowedMethods:
          type: array
          items:
            type: string
          uniqueItems: true
        closed:
          type: boolean
        cookies:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/NewCookie"
        date:
          type: string
          format: date-time
        entity:
          type: object
        entityTag:
          $ref: "#/components/schemas/EntityTag"
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
          properties:
            empty:
              type: boolean
        language:
          type: object
          properties:
            country:
              type: string
            displayCountry:
              type: string
            displayLanguage:
              type: string
            displayName:
              type: string
            displayScript:
              type: string
            displayVariant:
              type: string
            extensionKeys:
              type: array
              items:
                type: string
              uniqueItems: true
            iso3Country:
              type: string
            iso3Language:
              type: string
            language:
              type: string
            script:
              type: string
            unicodeLocaleAttributes:
              type: array
              items:
                type: string
              uniqueItems: true
            unicodeLocaleKeys:
              type: array
              items:
                type: string
              uniqueItems: true
            variant:
              type: string
        lastModified:
          type: string
          format: date-time
        length:
          type: integer
          format: int32
        links:
          type: array
          items:
            $ref: "#/components/schemas/Link"
          uniqueItems: true
        location:
          type: string
          format: uri
        mediaType:
          $ref: "#/components/schemas/MediaType"
        metadata:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
          properties:
            empty:
              type: boolean
        status:
          type: integer
          format: int32
        statusInfo:
          $ref: "#/components/schemas/StatusType"
        stringHeaders:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          properties:
            empty:
              type: boolean
    ServerStateModel:
      type: object
      properties:
        databaseUpgradePending:
          type: boolean
        serverInOkState:
          type: boolean
        serverRunning:
          type: boolean
        unavailableServices:
          type: array
          items:
            type: object
          uniqueItems: true
    StatusType:
      type: object
      properties:
        family:
          type: string
          enum:
          - INFORMATIONAL
          - SUCCESSFUL
          - REDIRECTION
          - CLIENT_ERROR
          - SERVER_ERROR
          - OTHER
        reasonPhrase:
          type: string
        statusCode:
          type: integer
          format: int32
    TemplateItem:
      type: object
      properties:
        edited:
          type: boolean
          description: Indicates whether the template has been edited.
          example: false
        folder:
          type: string
          description: Template folder name.
          example: GeneralCondTemplate
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/MetadataItem"
        name:
          type: string
          description: Template name.
          example: General Conditions
        version:
          type: integer
          format: int32
          description: Template version.
          example: 101
    TemplateList:
      type: object
      properties:
        templates:
          type: array
          items:
            $ref: "#/components/schemas/TemplateItem"
        totalCount:
          type: integer
          format: int32
    UploadResource:
      type: object
      properties:
        dataStream:
          type: string
          format: binary
          description: The file to be uploaded (max 100 MB).
        name:
          type: string
          description: Name of the resource including the extension.
        path:
          type: string
          description: "Path to the target directory. Example: icm://Interactive/StandardPackage/Resources/Images"
          example: icm://Interactive/StandardPackage/Resources/Images
        production:
          type: boolean
          default: false
          description: "If true, the resource will be in the production state. If\
            \ false (default), the resource will be uploaded as a draft."
      required:
      - dataStream
      - name
      - path
    UriBuilder:
      type: object
    VariableFormattedFlowType:
      type: object
      description: "Define individual Interactive flows, i.e. the NodePath flow to\
        \ which you want to place the variable formatted flow and the variable formatted\
        \ flow itself. 1 or more repetitions. Example: {\"interactiveFlow\": [{\"\
        nodePath\": {\"node\": [\"Flows\", \"Letter Content\"]}, \"vff\": \"<flow\
        \ type=simple>Sample text.</flow>\"}]}"
      properties:
        nodePath:
          $ref: "#/components/schemas/NodePathType"
        vff:
          type: string
          description: Content to be inserted into the given flow. It can contain
            VFF tags (see Variable Formatted Flows chapter in the Inspire Designer
            User Manual).
    VariableFormattedFlows:
      type: object
      description: "Element containing the definition of the variable formatted flows.\
        \ Example: {\"interactiveFlow\": [{\"nodePath\": {\"node\": [\"Flows\", \"\
        Letter Content\"]}, \"vff\": \"<flow type=simple>Sample text.</flow>\"}]}"
      properties:
        variableFormattedFlows:
          type: array
          description: "Define individual Interactive flows, i.e. the NodePath flow\
            \ to which you want to place the variable formatted flow and the variable\
            \ formatted flow itself. 1 or more repetitions. Example: {\"interactiveFlow\"\
            : [{\"nodePath\": {\"node\": [\"Flows\", \"Letter Content\"]}, \"vff\"\
            : \"<flow type=simple>Sample text.</flow>\"}]}"
          items:
            $ref: "#/components/schemas/VariableFormattedFlowType"
      required:
      - variableFormattedFlows
    _Condition:
      type: object
      example: |-
        {
            "negation": false,    "operator": "or",    "conditions": [],    "categorizations": [],    "metadata": [],}
  securitySchemes:
    bearerAuth:
      bearerFormat: Content Author API key
      scheme: bearer
      type: http
